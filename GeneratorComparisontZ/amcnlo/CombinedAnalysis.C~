#include <iostream>
#include <fstream> 
#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "TLeaf.h"
#include "TH1.h"
#include "TH2.h"
#include "TCanvas.h"
#include "TLorentzVector.h"
#include "TString.h"
#include "Wvariables.cxx"
#include "TopPolarization.C"
#include "AngularVariables.C"
#include "THStack.h"
#include "TStyle.h"
#include "TLegend.h"

using namespace std;

void CombinedAnalysis( TString in="ttbar-semileptonic/unweighted_events.root",TString out="histos-ttbar-semileptonic.root",double crossSection=6.406)
{
  double Lumi=21.7*1000;//21.7 fb^-1 * 1000 for pb 
  cout<<"in = "<<in<<'\n'<<"out = "<<out<<'\n'<<"crossSection = "<<crossSection<<'\n'<<'\n';
   TFile *rootfile=new TFile(in);

  TTree* LHEF=(TTree*)rootfile->Get("LHEF");
  //Double_t xbins[26] = {0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.37, 1.52, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.47};
   
  //TH2F *etaPhiLossMap = new TH2F("etaPhiLossMap","etaPhiLossMap",27,xbins,65,-3.2,3.2);
    
  // TH1F *tPT=new TH1F("tPT","t quark PT",40,0,400);
  
  
  TH1F *testNjets=new TH1F("testNjets","testNjets",10,0,10);
  TH1F *testNlep=new TH1F("testNlep","testNlep",10,0,10);
  TH1F *testNelec=new TH1F("testNelec","testNelec",10,0,10);
  
  TH1F *tPT=new TH1F("tPT","t quark PT",40,0,400);
  TH1F *tEta=new TH1F("tEta","t quark Eta",20,-5,5);
  TH1F *tphi=new TH1F("tphi","t quark phi",16,-4,4);

  TH1F *bPT=new TH1F("bPT","b quark PT",40,0,400);
  TH1F *bEta=new TH1F("bEta","b quark Eta",20,-5,5);
  TH1F *bphi=new TH1F("bphi","b quark phi",16,-4,4);

  TH1F *lPT=new TH1F("lPT","lepton PT",40,0,400);
  TH1F *lEta=new TH1F("lEta","lepton Eta",20,-5,5);
  TH1F *lphi=new TH1F("lphi","lepton phi",16,-4,4);

  TH1F *vPT=new TH1F("vPT","neutrino PT",40,0,400);
  TH1F *vEta=new TH1F("vEta","neutrino Eta",20,-5,5);
  TH1F *vphi=new TH1F("vphi","neutrino phi",16,-4,4);

  TH1F *wPT=new TH1F("wPT","W PT",40,0,400);
  TH1F *wEta=new TH1F("wEta","W Eta",20,-5,5);
  TH1F *wphi=new TH1F("wphi","W phi",16,-4,4);

  TH1F *zPT=new TH1F("zPT","Z PT",40,0,400);
  TH1F *zEta=new TH1F("zEta","Z Eta",20,-5,5);
  TH1F *zphi=new TH1F("zphi","Z phi",16,-4,4);

  TH1F *BJetPT=new TH1F("BJetPT","BJet PT",40,0,400);
  TH1F *BJetEta=new TH1F("BJetEta","BJet Eta",20,-5,5);
  TH1F *BJetphi=new TH1F("BJetphi","BJet phi",16,-4,4);
  TH1F *BJetmass=new TH1F("BJetmass","BJet mass",100,0,50);

  TH1F *nonBJetPT=new TH1F("nonBJetPT","nonBJet PT",40,0,400);
  TH1F *nonBJetEta=new TH1F("nonBJetEta","nonBJet Eta",20,-5,5);
  TH1F *nonBJetphi=new TH1F("nonBJetphi","nonBJet phi",16,-4,4);
  TH1F *nonBJetmass=new TH1F("nonBJetmass","nonBJet mass",100,0,50);

  TH1F *MET_PT=new TH1F("recovPT","MET PT",25,0,250);
  TH1F *MET_Eta=new TH1F("recovEta","MET Eta",20,-5,5);
  TH1F *MET_phi=new TH1F("recovphi","MET phi",16,-4,4);
  TH1F *MET_pz=new TH1F("recovpz","MET pz",100,-350,350);

  TH1F *lepton1PT=new TH1F("lepton1PT","lepton1 PT",25,0,250);
  TH1F *lepton1Eta=new TH1F("lepton1Eta","lepton1 Eta",20,-5,5);
  TH1F *lepton1phi=new TH1F("lepton1phi","lepton1 phi",16,-4,4);
  TH1F *lepton1mass=new TH1F("lepton1mass","lepton1 mass",100,0,2);

  TH1F *recoWPT=new TH1F("recoWPT","recoW PT",40,0,400);
  TH1F *recoWEta=new TH1F("recoWEta","recoW Eta",20,-5,5);
  TH1F *recoWphi=new TH1F("recoWphi","recoW phi",16,-4,4);
  TH1F *recoWmass=new TH1F("recoWmass","recoW mass",1000,80,80.8);

  TH1F *recotopPT=new TH1F("recotopPT","recotop PT",40,0,400);
  TH1F *recotopEta=new TH1F("recotopEta","recotop Eta",20,-5,5);
  TH1F *recotopphi=new TH1F("recotopphi","recotop phi",16,-4,4);
  TH1F *recotopmass=new TH1F("recotopmass","recotop mass",10,140,210);

  TH1F *recoZPT=new TH1F("recoZPT","recoZ PT",40,0,400);
  TH1F *recoZEta=new TH1F("recoZEta","recoZ Eta",20,-5,5);
  TH1F *recoZphi=new TH1F("recoZphi","recoZ phi",16,-4,4);
  TH1F *recoZmass=new TH1F("recoZmass","recoZ mass",1000,0,200);

  TH1F *lepton2PT=new TH1F("lepton2PT","lepton2 PT",25,0,250);
  TH1F *lepton2Eta=new TH1F("lepton2Eta","lepton2 Eta",20,-5,5);
  TH1F *lepton2phi=new TH1F("lepton2phi","lepton2 phi",16,-4,4);
  TH1F *lepton2mass=new TH1F("lepton2mass","lepton2 mass",100,0,2);

  TH1F *lepton3PT=new TH1F("lepton3PT","lepton3 PT",25,0,250);
  TH1F *lepton3Eta=new TH1F("lepton3Eta","lepton3 Eta",20,-5,5);
  TH1F *lepton3phi=new TH1F("lepton3phi","lepton3 phi",16,-4,4);
  TH1F *lepton3mass=new TH1F("lepton3mass","lepton3 mass",100,0,2);

  TH1F *leftoverLeptonPT=new TH1F("leftoverLeptonPT","leftoverLepton PT",25,0,250);
  TH1F *leftoverLeptonEta=new TH1F("leftoverLeptonEta","leftoverLepton Eta",20,-5,5);
  TH1F *leftoverLeptonphi=new TH1F("leftoverLeptonphi","leftoverLepton phi",16,-4,4);
  TH1F *leftoverLeptonmass=new TH1F("leftoverLeptonmass","leftoverLepton mass",100,0,2);

  TH1F *zLeptonPT=new TH1F("zLeptonPT","zLepton PT",25,0,250);
  TH1F *zLeptonEta=new TH1F("zLeptonEta","zLepton Eta",20,-5,5);
  TH1F *zLeptonphi=new TH1F("zLeptonphi","zLepton phi",16,-4,4);
  TH1F *zLeptonmass=new TH1F("zLeptonmass","zLepton mass",100,0,2);

  TH1F *zAntiLeptonPT=new TH1F("zAntiLeptonPT","zAntiLepton PT",25,0,250);
  TH1F *zAntiLeptonEta=new TH1F("zAntiLeptonEta","zAntiLepton Eta",20,-5,5);
  TH1F *zAntiLeptonphi=new TH1F("zAntiLeptonphi","zAntiLepton phi",16,-4,4);
  TH1F *zAntiLeptonmass=new TH1F("zAntiLeptonmass","zAntiLepton mass",100,0,2);

  TH1F *WTmass=new TH1F("WTmass","WTransversemass",25,0,250);
  TH1F *TopPolHB=new TH1F("TopPolHB","TopPolarizationHelicityBasis",10,-1,1);
  TH1F *TopPolOB=new TH1F("TopPolOB","TopPolarizationOptimalBasis",10,-1,1);
  TH1F *centralityhist=new TH1F("centrality","centrality",10,0,1);
  TH1F *sphericityhist=new TH1F("sphericity","sphericity",20,0,1);
  TH1F *aplanarityhist=new TH1F("aplanarity","aplanarity",20,0,1);
  TH1F *WHel=new TH1F("WHel","WHelicity",10,-1,1);
  TH1F *h_hist=new TH1F("h","h",30,0,3000);
  TH1F *ht_hist=new TH1F("ht","ht",20,0,1000);







  //decalre counting doubles here ***********
  double afterNothing=0;
  double afterLeptonCuts=0;
  double afterjetIso=0;
  double afterjetQ=0;
  double afterMET=0;
  double totalPassed=0;
  double afterLeptonIso=0;
  double afterNlep=0;
  double afterChargeReq=0;
  double afterNjets=0;
  double afterMETPz=0;
  double afterWpt=0;
  double afterWeta=0;
  double afterTopPt=0;
  double afterTopMass=0;
  double afterBjet=0;
  double nWrongZ=0;
  double nRightZ=0;
  int nev=10000;
  
  double theweight=Lumi*crossSection/nev;

  //cout<<theweight<<'\n';
    
  for(int q=0;q<nev;q++)//event loop
    {
      afterNothing+=theweight;
      //cout<<'\n'<<"start"<<'\n';
      if(q%1000==0)
	cout<<"event "<<q<<'\n';
      LHEF->GetEntry(q);
      int nparticles = (int)LHEF->GetLeaf("Event.Nparticles")->GetValue(0);
      //cout<<"stuff"<<'\n';
      TLorentzVector NegMET;
      TLorentzVector MET;
      TLorentzVector wFourVec;
      TLorentzVector zFourVec;
      TLorentzVector tFourVec;

      zFourVec.SetPtEtaPhiM(0,0,0,0);
      wFourVec.SetPtEtaPhiM(0,0,0,0);
      tFourVec.SetPtEtaPhiM(0,0,0,0);
      MET.SetPtEtaPhiM(0,0,0,0);


      vector<TLorentzVector> jet;
      vector<bool> isb;
      vector<TLorentzVector> lepton;
      vector<int> lcharge;
      vector<int> ltype;
      vector<int> isZ;
      //int nelec=0;

      bool eventSel=true;//this holds my event selection stuff

      for(int i=0;i<nparticles;i++)//particle loop fills basic histograms
	{
	  int PID=(int)LHEF->GetLeaf("Particle.PID")->GetValue(i);
	  double pt=LHEF->GetLeaf("Particle.PT")->GetValue(i);
	  double eta=LHEF->GetLeaf("Particle.Eta")->GetValue(i);
	  double phi=LHEF->GetLeaf("Particle.Phi")->GetValue(i);
	  double E=LHEF->GetLeaf("Particle.E")->GetValue(i);
	  int status=(int)LHEF->GetLeaf("Particle.Status")->GetValue(i);

	  if(abs(PID)==11 || abs(PID)==13)
	    {
	      lPT->Fill(pt,theweight);
	      lEta->Fill(eta,theweight);
	      lphi->Fill(phi,theweight);
	      TLorentzVector temp;
	      temp.SetPtEtaPhiE(pt,eta,phi,E);
	      lepton.push_back(temp);
	      if(PID > 0)
		lcharge.push_back(-1);
	      else
		lcharge.push_back(1);
	      if(abs(PID)==11)
		{
		  //nelec++;
		  ltype.push_back(1);
		}
	      else if(abs(PID)==13)
		ltype.push_back(2);
	      isZ.push_back((int)LHEF->GetLeaf("Particle.Mother1")->GetValue(i));
	    }
	  else if(abs(PID)==5 && status==1)
	    {
	      bPT->Fill(pt,theweight);
	      bEta->Fill(eta,theweight);
	      bphi->Fill(phi,theweight);
	    }
	  else if(abs(PID)==6)
	    {
	      tPT->Fill(pt,theweight);
	      tEta->Fill(eta,theweight);
	      tphi->Fill(phi,theweight);
	    }
	  else if(abs(PID)==12)
	    {
	      vPT->Fill(pt,theweight);
	      vEta->Fill(eta,theweight);
	      vphi->Fill(phi,theweight);
	    }
	  else if(abs(PID)==24)
	    {
	      wPT->Fill(pt,theweight);
	      wEta->Fill(eta,theweight);
	      wphi->Fill(phi,theweight);
	    }

	  else if(abs(PID)==23)
	    {
	      zPT->Fill(pt,theweight);
	      zEta->Fill(eta,theweight);
	      zphi->Fill(phi,theweight);
	      //cout<<pt<<'\n';
	    }


	  if(status==1)
	    {
	      if(PID==9 || PID==21 || (PID<=6 && PID>=-6 && PID!=0))
		{
		  TLorentzVector temp;
		  temp.SetPtEtaPhiE(pt,eta,phi,E);
		  jet.push_back(temp);
		  if(abs(PID)==5)
		    isb.push_back(true);
		  else
		    isb.push_back(false);
		  //cout<<PID<<"filling jet["<<njets<<"].Pt="<<jet[njets].Pt()<<'\n';
		}
	    }

	}

     
      //cout<<"hey"<<'\n';

      for(unsigned int c=0;c<lepton.size();c++)
	{
	  if(lepton.size()>0 && (fabs((lepton.at(c)).Eta())>2.5 || ((lepton.at(c)).Pt())<0))//lepton cuts
	    {
	      vector<TLorentzVector>::iterator Iter;
	      Iter=lepton.begin()+c;
	      lepton.erase(Iter);
	      vector<int>::iterator It;
	      It=lcharge.begin()+c;
	      lcharge.erase(It);
	      vector<int>::iterator Ite;
	      Ite=ltype.begin()+c;
	      ltype.erase(Ite);
	      vector<int>::iterator Itera;
	      Itera=isZ.begin()+c;
	      isZ.erase(Itera);
	      c--;

	    }
	}

      if(lepton.size()!=3)
	eventSel=false;

      if(eventSel)
	afterNlep+=theweight;

      //apply lepton isolation **********
     
      /*
      if(eventSel)
	{
	  for(unsigned int j=0;j<lepton.size();j++)
	    {
	      if(lepton.size()>0)
		{
		  for(unsigned int i=0;i<jet.size();i++)//checking lepton vs jet isolation
		    {
		      if(jet.size()>0)
			{
			  double dR=(lepton.at(j)).DeltaR(jet.at(i));
			  if(dR<0.2)
			    {
			      vector<TLorentzVector>::iterator Iter;
			      Iter=lepton.begin()+j;
			      lepton.erase(Iter);
			      vector<int>::iterator It;
			      //if i use this need to add ltype as well
			      It=lcharge.begin()+j;
			      lcharge.erase(It);
			      j--;
			      i=jet.size();
			    }
			}
		    }
		}
	    }
	}
      */

      
      if(eventSel)
	{
	  double maxpt=0;
	  int place=-1;
	  for(unsigned int t=0;t<lepton.size();t++)
	    {
	      if( (lepton.at(t)).Pt()>maxpt)
		{
		  maxpt=(lepton.at(t)).Pt();
		  place=t;
		}
	    }
	  assert(place>=0);
	  if(place!=0)
	    {
	      TLorentzVector temp=lepton.at(place);
	      lepton.at(place)=lepton.at(0);
	      lepton.at(0)=temp;
	      int tempi=lcharge.at(place);
	      lcharge.at(place)=lcharge.at(0);
	      lcharge.at(0)=tempi;
	      int tempt=ltype.at(place);
	      ltype.at(place)=ltype.at(0);
	      ltype.at(0)=tempt;
	      int tempq=isZ.at(place);
	      isZ.at(place)=isZ.at(0);
	      isZ.at(0)=tempq;
	    }
	  if( (lepton.at(1)).Pt() < (lepton.at(2)).Pt() )
	    {
	      TLorentzVector temp=lepton.at(1);
	      lepton.at(1)=lepton.at(2);
	      lepton.at(2)=temp;
	      int tempi=lcharge.at(1);
	      lcharge.at(1)=lcharge.at(2);
	      lcharge.at(2)=tempi;
	      int tempt=ltype.at(1);
	      ltype.at(1)=ltype.at(2);
	      ltype.at(2)=tempt;
	      int tempq=isZ.at(1);
	      isZ.at(1)=isZ.at(2);
	      isZ.at(2)=tempq;
	    }
	  
	}

      //cout<<"listen"<<'\n';
      
      if(eventSel)
	{
	  //cout<<"passed lepton and neutrino_ requirements!"<<'\n';
	  
	  for(unsigned int c=0;c<jet.size()-1;c++)//sorts jets with isb information
	    {
	      for(unsigned int d=c+1;d<jet.size();d++)
		{
		  if( (jet.at(c)).Pt()< (jet.at(d)).Pt())
		    {
		      TLorentzVector temp=jet.at(c);
		      jet.at(d)=jet.at(c);
		      jet.at(c)=temp;
		      int tempi=isb.at(c);
		      isb.at(c)=isb.at(d);
		      isb.at(d)=tempi;
		    }
		}
	    }
	  /*  
	  for(unsigned int c=0;c<jet.size()-1;c++)//checking jet isolation requirements
	    {
	      for(unsigned int d=0;d<jet.size();d++)
		{
		  if(c<d)
		    {
		      double dR=(jet.at(c)).DeltaR(jet.at(d));
		      
		      if(dR<0.4)
			{
			  TLorentzVector tempjet=jet.at(c);
			  jet.at(c)=tempjet+jet.at(d);
			  vector<TLorentzVector>::iterator Iter;
			  Iter=jet.begin()+d;
			  //cout<<"dr works Iter="<<Iter<<'\n';
			  jet.erase(Iter);
			  
			  isb.at(c) = isb.at(c) || isb.at(d);
			  vector<bool>::iterator It;
			  It=isb.begin()+d;
			  isb.erase(It);
			  
			  
			  for(unsigned int po=0;po<jet.size()-1;po++)
			    {
			      for(unsigned int la=po+1;la<jet.size();la++)
				{
				  if( (jet.at(po)).Pt()< (jet.at(la)).Pt())
				    {
				      TLorentzVector temp=jet.at(po);
				      jet.at(la)=jet.at(po);
				      jet.at(po)=temp;
				      int tempi=isb.at(po);
				      isb.at(po)=isb.at(la);
				      isb.at(la)=tempi;
				    }
				}
			    }
			  
			  d=jet.size();//these two lines ensure we restart the c and d loops 
			  c=-1;//note: c is -1 so at the end of the loop it gets incremented to 0
			}
		    }
		}
	    }
	  */
	}

      //cout<<"hey"<<'\n';

      //if(jet.size()==0)
      //	eventSel=false;

      //if(eventSel)
      //	afterjetIso++;

      if(eventSel)
	{	  
	  for(unsigned int w=0;w<jet.size();w++)
	    {
	      if(jet.size()>0 && ((jet.at(w)).Pt()<25 || fabs((jet.at(w)).Eta())>4.5) )//checking jet quality 
		{
		  vector<TLorentzVector>::iterator Iter;
		  Iter=jet.begin()+w;
		  jet.erase(Iter);

		  vector<bool>::iterator It;
		  It=isb.begin()+w;
		  isb.erase(It);

		  if(w!=jet.size())//rechecks the position we are at so that we don't let a bad jet slip through, 
		    w--;//unless we just deleted the last element, then we can stop
		}
	    }//after this point jets only has "good" jets
	}

      if(jet.size()!=2) 
	eventSel=false;

     if(eventSel)
      	afterjetQ+=theweight;

      if(eventSel)//checking if there is a b 
	{
	  int found=0;
     	  for(unsigned int y=0;y<isb.size();y++)
	    if(isb.at(y) && fabs((jet.at(y)).Eta())<2.5 )
	      found++;
	  if(found==1)
	    eventSel=true;
	  else
	    eventSel=false;
	}
      
      
      if(eventSel)
      	afterBjet+=theweight;
            
           	       
      if(eventSel)//MET requirements
	{
	  for(int y=0;y<nparticles;y++)
	    {
	      int status=(int)LHEF->GetLeaf("Particle.Status")->GetValue(y);
	      int PID=(int)LHEF->GetLeaf("Particle.PID")->GetValue(y);

	      
	      if(status==1 && (PID==9 || PID==21 || (PID<=6 && PID>=-6 && PID!=0) || PID==11 || PID==-11 || PID==13 || PID==-13) )
		{
		  double pt=LHEF->GetLeaf("Particle.PT")->GetValue(y);
		  double eta=LHEF->GetLeaf("Particle.Eta")->GetValue(y);
		  double phi=LHEF->GetLeaf("Particle.Phi")->GetValue(y);
		  double E=LHEF->GetLeaf("Particle.E")->GetValue(y);

		  TLorentzVector temp = NegMET;
		  TLorentzVector temp2;
		  temp2.SetPtEtaPhiE(pt,eta,phi,E);
		  NegMET=temp+temp2;
		}
	    }

	  if(NegMET.Pt()<15)
	    {
	      eventSel=false;
	      //cout<<"failed neutrino_ cut: neutrino_="<<NegMET.Pt()<<'\n';
	    }
	}
      
      if(eventSel)
	afterMET+=theweight;
      
      TLorentzVector leftoverLepton;
      TLorentzVector zLepton;
      TLorentzVector zAntiLepton;

      


      if(eventSel)
	{
	  
	  //cout<<"listen"<<'\n';

	  //now we will reconstruct things ************
	 
	  //reconstruct the z
	  
	  //zFourVec=NegMET;

	  bool setz=false;
	  
	  int nelec=0;
	  int nmuon=0;
	  for(unsigned int u=0;u<ltype.size();u++)
	    {
	      if(ltype.at(u)==1)
		nelec++;
	      else
		{
		  assert(ltype.at(u)==2);
		  nmuon++;
		}
	    }

	  //cout<<'\n';

	  assert(nelec+nmuon==3);

	  //cout<<"nelec="<<nelec<<'\n';

	  bool correctzlep=true;

	  if(nelec==2)
	    {
	      //cout<<"2electrons"<<'\n';
	      for(unsigned int u=0;u<lepton.size();u++)
		{
		  if(ltype.at(u)==1)
		    {
		      TLorentzVector temp=zFourVec;
		      zFourVec=temp+lepton.at(u);
		      setz=true;
		      if(lcharge.at(u)==-1)
			zLepton=lepton.at(u);
		      else
			{
			  assert(lcharge.at(u)==1);
			  zAntiLepton=lepton.at(u);
			}
		      if(isZ.at(u)!=5 && isZ.at(u)!=1)
			correctzlep=false;
		    }
		  else
		    leftoverLepton=lepton.at(u);
		}
	      //cout<<"zmass"<<zFourVec.M()<<'\n';
	    }
	  else if(nmuon==2)
	    {
	      //cout<<"2muons"<<'\n';
	      for(unsigned int u=0;u<lepton.size();u++)
		{
		  if(ltype.at(u)==2)
		    {
		      TLorentzVector temp=zFourVec;
		      zFourVec=temp+lepton.at(u);
		      setz=true;
		      if(lcharge.at(u)==-1)
			zLepton=lepton.at(u);
		      else
			{
			  assert(lcharge.at(u)==1);
			  zAntiLepton=lepton.at(u);
			}
		      if(isZ.at(u)!=5 && isZ.at(u)!=1)
			correctzlep=false;
		    }
		  else
		    leftoverLepton=lepton.at(u);
		}
	      //cout<<"zmass"<<zFourVec.M()<<'\n';
	    }
	  else//find pair that gives closest to z mass while keeping Z charge=0
	    {
	      //cout<<nmuon<<" "<<nelec<<'\n';
	      //cout<<lcharge.at(0)<<" "<<lcharge.at(1)<<" "<<lcharge.at(2)<<'\n';
	      TLorentzVector temp;
	      //cout<<"zmass="<<zFourVec.M()<<'\n';
	      //cout<<"correctZlep="<<correctzlep<<'\n';
	      //cout<<"isZ.at(0)="<<isZ.at(0)<<"isZ.at(1)="<<isZ.at(1)<<"isZ.at(2)="<<isZ.at(2)<<'\n';
	      if(lcharge.at(0)!=lcharge.at(1))
		{
		  temp=lepton.at(0)+lepton.at(1);
		  if(zFourVec.M()==0 || fabs(temp.M()-91.1) < fabs(zFourVec.M()-91.1) )
		    {
		      //cout<<"in01"<<'\n';
		      zFourVec=temp;
		      setz=true;
		      if(lcharge.at(0)==-1)
			{
			  zLepton=lepton.at(0);
			  zAntiLepton=lepton.at(1);
			}
		      else
			{
			  assert(lcharge.at(0)==1);
			  zLepton=lepton.at(1);
			  zAntiLepton=lepton.at(0);
			}
		      if( (isZ.at(0)!=5  && isZ.at(0)!=1) || (isZ.at(1)!=5 && isZ.at(1)!=1) )
			correctzlep=false;
		      else
			correctzlep=true;
		      leftoverLepton=lepton.at(2);
		    }
		}
	      //cout<<"zmass="<<zFourVec.M()<<'\n';
	      //cout<<"correctZlep="<<correctzlep<<'\n';
	      if(lcharge.at(0)!=lcharge.at(2))
		{
		  temp=lepton.at(0)+lepton.at(2);
		  if(zFourVec.M()==0 ||  fabs(temp.M()-91.1) < fabs(zFourVec.M()-91.1) )
		    {
		      //cout<<"in02"<<'\n';
		      zFourVec=temp;
		      setz=true;
		      if(lcharge.at(0)==-1)
			{
			  zLepton=lepton.at(0);
			  zAntiLepton=lepton.at(2);
			}
		      else
			{
			  assert(lcharge.at(0)==1);
			  zLepton=lepton.at(2);
			  zAntiLepton=lepton.at(0);
			}
		      if((isZ.at(0)!=5  && isZ.at(0)!=1) || (isZ.at(2)!=5 && isZ.at(2)!=1))
			correctzlep=false;
		      else
			correctzlep=true;
		      leftoverLepton=lepton.at(1);
		    }
		}
	      //cout<<"zmass="<<zFourVec.M()<<'\n';
	      //cout<<"correctZlep="<<correctzlep<<'\n';
	      if(lcharge.at(1)!=lcharge.at(2))
		{
		  temp=lepton.at(1)+lepton.at(2);
		  if(zFourVec.M()==0 ||  fabs(temp.M()-91.1) < fabs(zFourVec.M()-91.1) )
		    {
		      //cout<<"in12"<<'\n';
		      zFourVec=temp;
		      setz=true;
		      if(lcharge.at(1)==-1)
			{
			  zLepton=lepton.at(1);
			  zAntiLepton=lepton.at(2);
			}
		      else
			{
			  assert(lcharge.at(1)==1);
			  zLepton=lepton.at(2);
			  zAntiLepton=lepton.at(1);
			}
		      if((isZ.at(1)!=5  && isZ.at(1)!=1) || (isZ.at(2)!=5 && isZ.at(2)!=1))
			correctzlep=false;
		      else
			correctzlep=true;
		      leftoverLepton=lepton.at(0);
		    }
		}
	      //cout<<"zmass="<<zFourVec.M()<<'\n';
	      //cout<<"correctZlep="<<correctzlep<<'\n';
	    }

	  if(!setz)
	    {
	      TLorentzVector temp;
	      cout<<"nelec="<<nelec<<"nmuon="<<nmuon<<'\n';
	      cout<<"zFourVec.M()="<<zFourVec.M()<<'\n';
	      temp=lepton.at(0)+lepton.at(1);
	      cout<<"01temp.M()="<<temp.M()<<'\n';
	      temp=lepton.at(0)+lepton.at(2);
	      cout<<"02temp.M()="<<temp.M()<<'\n';
	      temp=lepton.at(1)+lepton.at(2);
	      cout<<"12temp.M()="<<temp.M()<<'\n';
	    }

	  assert(setz);

	  if(correctzlep)
	    nRightZ+=theweight;
	  else
	    nWrongZ+=theweight;



	  //reconstruct the v from remaining lepton and assume w mass

	  double METPhi=NegMET.Phi();
	  METPhi+=3.14;
	  if(METPhi>3.14)
	    METPhi-=6.28;
	  
	  MET=Wvariables::Wneutrino(-1.0*NegMET.Pt(), METPhi, leftoverLepton.Pt(), leftoverLepton.Eta(), leftoverLepton.Phi() );

	  //cout<<"leftoverLepton.Pt() ="<<leftoverLepton.Pt() <<'\n';
	  //cout<<"leftoverLepton.Phi() ="<<leftoverLepton.Phi() <<'\n';
	  //cout<<"-1.0*NegMET.Pt() ="<<-1.0*NegMET.Pt() <<'\n';
	  //cout<<"METPhi ="<<METPhi <<'\n';
	  //cout<<" ="<< <<'\n';
	  //cout<<" ="<< <<'\n';



	  double WTransverseMass=Wvariables::WtransverseMass(leftoverLepton.Pt(),leftoverLepton.Phi(),-1.0*NegMET.Pt(),METPhi);
	  
	  //cout<<"WTransversemass="<<WTransverseMass<<'\n';
	  //reconstruct w

	  wFourVec=MET+leftoverLepton;

	  //reconstruct top from w+bjet
	  
	  if(isb.at(0))
	    tFourVec=wFourVec+jet.at(0);
	  else if(isb.at(1))
	    tFourVec=wFourVec+jet.at(1);
	  


	  double ht=AngularVariables::ht(jet,lepton,MET);
	  double h=AngularVariables::h(jet,lepton,MET);
	  double centrality=AngularVariables::centrality(ht,h);

	  vector<double> a_s=AngularVariables::aplan_spher(jet,lepton,MET);
	  
	  double aplanarity=a_s.at(0);
	  double sphericity=a_s.at(1);

	  TLorentzVector CMframe=wFourVec+zFourVec;
	  for(unsigned int i=0; i<jet.size();i++)
	    CMframe=CMframe+jet.at(i);
	  
	  TLorentzVector tlSpec;//leading jet not from top
	  
	  if(isb.at(0))
	    tlSpec=jet.at(1);
	  else if(isb.at(1))
	    tlSpec=jet.at(0);
	  
	  double WHelicity=TopPolarization::WHelicity(leftoverLepton,wFourVec,tFourVec);
	  double TopPolHel=TopPolarization::TopPolHelBasis(leftoverLepton,CMframe,tFourVec);
	  double TopPolOpt=TopPolarization::TopPolOptimalBasis(leftoverLepton,tlSpec,tFourVec);

	  //cout<<"listen"<<'\n';
	  

	  bool goodevent=true;

	  //reco cuts affect goodevent



	  if(goodevent)
	    {
	      
	      //now we have done jet recombination and are sorted making a plot of Njets
	      testNjets->Fill(jet.size(),theweight);
	      testNlep->Fill(lepton.size(),theweight);
	      testNelec->Fill(nelec,theweight);
	      
	      //making plots of leading and subleading jet
	      
	      assert(jet.size()==2);
	      assert(isb.size()==2);
	      int nbjets=0;
	      if(isb.at(0)==true)nbjets++;
	      if(isb.at(1)==true)nbjets++;
	      
	      //assert(nbjets==1);
	      
	      if(isb.at(0))
		{
		  BJetPT->Fill((jet.at(0)).Pt(),theweight);
		  BJetEta->Fill((jet.at(0)).Eta(),theweight);
		  BJetphi->Fill((jet.at(0)).Phi(),theweight);
		  BJetmass->Fill((jet.at(0)).M(),theweight);
		  
		  nonBJetPT->Fill((jet.at(1)).Pt(),theweight);
		  nonBJetEta->Fill((jet.at(1)).Eta(),theweight);
		  nonBJetphi->Fill((jet.at(1)).Phi(),theweight);
		  nonBJetmass->Fill((jet.at(1)).M(),theweight);
		}
	      else if(isb.at(1))
		{
		  BJetPT->Fill((jet.at(1)).Pt(),theweight);
		  BJetEta->Fill((jet.at(1)).Eta(),theweight);
		  BJetphi->Fill((jet.at(1)).Phi(),theweight);
		  BJetmass->Fill((jet.at(1)).M(),theweight);
		  
		  nonBJetPT->Fill((jet.at(0)).Pt(),theweight);
		  nonBJetEta->Fill((jet.at(0)).Eta(),theweight);
		  nonBJetphi->Fill((jet.at(0)).Phi(),theweight);
		  nonBJetmass->Fill((jet.at(0)).M(),theweight);
		}
	      
	      assert(lepton.size()==3);
	      //making plots for leptons
	      lepton1PT->Fill((lepton.at(0)).Pt(),theweight);
	      lepton1Eta->Fill((lepton.at(0)).Eta(),theweight);
	      lepton1phi->Fill((lepton.at(0)).Phi(),theweight);
	      lepton1mass->Fill((lepton.at(0)).M(),theweight);

	      lepton2PT->Fill((lepton.at(1)).Pt(),theweight);
	      lepton2Eta->Fill((lepton.at(1)).Eta(),theweight);
	      lepton2phi->Fill((lepton.at(1)).Phi(),theweight);
	      lepton2mass->Fill((lepton.at(1)).M(),theweight);

	      lepton3PT->Fill((lepton.at(2)).Pt(),theweight);
	      lepton3Eta->Fill((lepton.at(2)).Eta(),theweight);
	      lepton3phi->Fill((lepton.at(2)).Phi(),theweight);
	      lepton3mass->Fill((lepton.at(2)).M(),theweight);

	      leftoverLeptonPT->Fill(leftoverLepton.Pt(),theweight);
	      leftoverLeptonEta->Fill(leftoverLepton.Eta(),theweight);
	      leftoverLeptonphi->Fill(leftoverLepton.Phi(),theweight);
	      leftoverLeptonmass->Fill(leftoverLepton.M(),theweight);

	      zLeptonPT->Fill(zLepton.Pt(),theweight);
	      zLeptonEta->Fill(zLepton.Eta(),theweight);
	      zLeptonphi->Fill(zLepton.Phi(),theweight);
	      zLeptonmass->Fill(zLepton.M(),theweight);

	      zAntiLeptonPT->Fill(zAntiLepton.Pt(),theweight);
	      zAntiLeptonEta->Fill(zAntiLepton.Eta(),theweight);
	      zAntiLeptonphi->Fill(zAntiLepton.Phi(),theweight);
	      zAntiLeptonmass->Fill(zAntiLepton.M(),theweight);
	      
	      //cout<<"zLeptonPt"<<zLepton.Pt()<<'\n';
	      //cout<<"zAntiLeptonPt"<<zAntiLepton.Pt()<<'\n';

	      //making plots for reco objects
	      recoZPT->Fill(zFourVec.Pt(),theweight);
	      recoZEta->Fill(zFourVec.Eta(),theweight);
	      recoZphi->Fill(zFourVec.Phi(),theweight);
	      recoZmass->Fill(zFourVec.M(),theweight);

	      MET_PT->Fill(MET.Pt(),theweight);
	      MET_Eta->Fill(MET.Eta(),theweight);
	      MET_phi->Fill(MET.Phi(),theweight);
	      MET_pz->Fill(MET.Pz() ,theweight);

	      recoWPT->Fill(wFourVec.Pt(),theweight);
	      recoWEta->Fill(wFourVec.Eta(),theweight);
	      recoWphi->Fill(wFourVec.Phi(),theweight);
	      recoWmass->Fill(wFourVec.M(),theweight);
	      
	      recotopPT->Fill(tFourVec.Pt(),theweight);
	      recotopEta->Fill(tFourVec.Eta(),theweight);
	      recotopphi->Fill(tFourVec.Phi(),theweight);
	      recotopmass->Fill(tFourVec.M(),theweight);

	      assert(WTransverseMass>0);

	      WTmass->Fill(WTransverseMass,theweight);
	      TopPolHB->Fill(TopPolHel,theweight);
	      TopPolOB->Fill(TopPolOpt,theweight);
	      centralityhist->Fill(centrality,theweight);
	      sphericityhist->Fill(sphericity,theweight);
	      aplanarityhist->Fill(aplanarity,theweight);
	      WHel->Fill(WHelicity,theweight);
	      h_hist->Fill(h,theweight);
	      ht_hist->Fill(ht,theweight);

	      totalPassed+=theweight;
	    }
	  //cout<<"end"<<'\n';
	}
      
    }

  cout<<'\n';
  
  cout<<"afterNothing="<<afterNothing<<'\n';
  // cout<<"afterLeptonCuts="<<afterLeptonCuts<<'\n';
  // cout<<"afterLeptonIso="<<afterLeptonIso<<'\n';
  cout<<"afterNlep="<<afterNlep<<'\n';
  // cout<<"afterChargeReq="<<afterChargeReq<<'\n';
  // cout<<"afterJetIso="<<afterjetIso<<'\n';
  cout<<"afterJetQ="<<afterjetQ<<'\n';
  cout<<"afterBJet="<<afterBjet<<'\n';
  // cout<<"afterNjets="<<afterNjets<<'\n';
  cout<<"afterMET="<<afterMET<<'\n';
  // cout<<"afterMETPz="<<afterMETPz<<'\n';
  //cout<<"afterWpt="<<afterWpt<<'\n';
  //cout<<"afterWeta="<<afterWeta<<'\n';
  // cout<<"afterTopPt="<<afterTopPt<<'\n';
  //cout<<"afterTopMass="<<afterTopMass<<'\n';
  
  cout<<"totalPassed="<<totalPassed<<'\n';
  cout<<"nWrongZ="<<nWrongZ<<'\n';
  cout<<"nRightZ="<<nRightZ<<'\n';
 cout<<"weight="<<Lumi*crossSection/nev<<'\n';
     
  ofstream comboResults;
  comboResults.open ("/msu/data/t3work5/schoenr1/ztMadgraph/comboResults.txt", ios::out | ios::app); 
  
  comboResults<<out<<'\n'<<"afterNothing="<<afterNothing<<'\n'<<"afterLeptonCuts="<<afterLeptonCuts<<'\n'<<"afterLeptonIso="<<afterLeptonIso<<'\n'<<"afterNlep="<<afterNlep<<'\n'<<"afterChargeReq="<<afterChargeReq<<'\n'<<"afterJetIso="<<afterjetIso<<'\n'<<"afterJetQ="<<afterjetQ<<'\n'<<"afterNjets"<<afterNjets<<'\n'<<"afterMET="<<afterMET<<'\n'<<"afterMETPz="<<afterMETPz<<'\n'<<"afterWpt="<<afterWpt<<'\n'<<"afterWeta="<<afterWeta<<'\n'<<"afterTopPt="<<afterTopPt<<'\n'<<"afterTopMass="<<afterTopMass<<'\n'<<"totalPassed="<<totalPassed<<'\n'<<'\n'<<'\n'<<'\n';

  TCanvas *c1 = new TCanvas("c1","c1",560,720);
  
  if(totalPassed>0)
    {
     
      testNjets->Draw();
      testNjets->Scale(Lumi*crossSection/afterNothing);
      testNlep->Draw();
      testNlep->Scale(Lumi*crossSection/afterNothing);
      testNelec->Draw();
      testNelec->Scale(Lumi*crossSection/afterNothing);

      tPT->Scale(Lumi*crossSection/afterNothing);
      tPT->Draw();
      tEta->Scale(Lumi*crossSection/afterNothing);
      tEta->Draw();
      tphi->Scale(Lumi*crossSection/afterNothing);
      tphi->Draw();
      
      bPT->Scale(Lumi*crossSection/afterNothing);
      bPT->Draw();
      bEta->Scale(Lumi*crossSection/afterNothing);
      bEta->Draw();
      bphi->Scale(Lumi*crossSection/afterNothing);
      bphi->Draw();
      
      lPT->Scale(Lumi*crossSection/afterNothing);
      lPT->Draw();
      lEta->Scale(Lumi*crossSection/afterNothing);
      lEta->Draw();
      lphi->Scale(Lumi*crossSection/afterNothing);
      lphi->Draw();
      
      vPT->Scale(Lumi*crossSection/afterNothing);
      vPT->Draw();
      vEta->Scale(Lumi*crossSection/afterNothing);
      vEta->Draw();
      vphi->Scale(Lumi*crossSection/afterNothing);
      vphi->Draw();
      
      wPT->Scale(Lumi*crossSection/afterNothing);
      wPT->Draw();
      wEta->Scale(Lumi*crossSection/afterNothing);
      wEta->Draw();
      wphi->Scale(Lumi*crossSection/afterNothing);
      wphi->Draw();
      
      zPT->Scale(Lumi*crossSection/afterNothing);
      zPT->Draw();
      zEta->Scale(Lumi*crossSection/afterNothing);
      zEta->Draw();
      zphi->Scale(Lumi*crossSection/afterNothing);
      zphi->Draw();

          
      BJetPT->Scale(Lumi*crossSection/afterNothing);
      BJetPT->Draw();
      BJetEta->Scale(Lumi*crossSection/afterNothing);
      BJetEta->Draw();
      BJetphi->Scale(Lumi*crossSection/afterNothing);
      BJetphi->Draw();
      BJetmass->Scale(Lumi*crossSection/afterNothing);
      BJetmass->Draw();
      
      nonBJetPT->Scale(Lumi*crossSection/afterNothing);
      nonBJetPT->Draw();
      nonBJetEta->Scale(Lumi*crossSection/afterNothing);
      nonBJetEta->Draw();
      nonBJetphi->Scale(Lumi*crossSection/afterNothing);
      nonBJetphi->Draw();
      nonBJetmass->Scale(Lumi*crossSection/afterNothing);
      nonBJetmass->Draw();
            
      MET_PT->Scale(Lumi*crossSection/afterNothing);
      MET_PT->Draw();
      MET_Eta->Scale(Lumi*crossSection/afterNothing);
      MET_Eta->Draw();
      MET_phi->Scale(Lumi*crossSection/afterNothing);
      MET_phi->Draw();
      MET_pz->Scale(Lumi*crossSection/afterNothing);
      MET_pz->Draw();
      
      lepton1PT->Scale(Lumi*crossSection/afterNothing);
      lepton1PT->Draw();
      lepton1Eta->Scale(Lumi*crossSection/afterNothing);
      lepton1Eta->Draw();
      lepton1phi->Scale(Lumi*crossSection/afterNothing);
      lepton1phi->Draw();
      lepton1mass->Scale(Lumi*crossSection/afterNothing);
      lepton1mass->Draw();
      
      recoWPT->Scale(Lumi*crossSection/afterNothing);
      recoWPT->Draw();
      recoWEta->Scale(Lumi*crossSection/afterNothing);
      recoWEta->Draw();
      recoWphi->Scale(Lumi*crossSection/afterNothing);
      recoWphi->Draw();
      recoWmass->Scale(Lumi*crossSection/afterNothing);
      recoWmass->Draw();

      recoZPT->Scale(Lumi*crossSection/afterNothing);
      recoZPT->Draw();
      recoZEta->Scale(Lumi*crossSection/afterNothing);
      recoZEta->Draw();
      recoZphi->Scale(Lumi*crossSection/afterNothing);
      recoZphi->Draw();
      recoZmass->Scale(Lumi*crossSection/afterNothing);
      recoZmass->Draw();
      
      recotopPT->Scale(Lumi*crossSection/afterNothing);
      recotopPT->Draw();
      recotopEta->Scale(Lumi*crossSection/afterNothing);
      recotopEta->Draw();
      recotopphi->Scale(Lumi*crossSection/afterNothing);
      recotopphi->Draw();
      recotopmass->Scale(Lumi*crossSection/afterNothing);
      recotopmass->Draw();

      lepton2PT->Scale(Lumi*crossSection/afterNothing);
      lepton2PT->Draw();
      lepton2Eta->Scale(Lumi*crossSection/afterNothing);
      lepton2Eta->Draw();
      lepton2phi->Scale(Lumi*crossSection/afterNothing);
      lepton2phi->Draw();
      lepton2mass->Scale(Lumi*crossSection/afterNothing);
      lepton2mass->Draw();
      
      lepton3PT->Scale(Lumi*crossSection/afterNothing);
      lepton3PT->Draw();
      lepton3Eta->Scale(Lumi*crossSection/afterNothing);
      lepton3Eta->Draw();
      lepton3phi->Scale(Lumi*crossSection/afterNothing);
      lepton3phi->Draw();
      lepton3mass->Scale(Lumi*crossSection/afterNothing);
      lepton3mass->Draw();

      leftoverLeptonPT->Scale(Lumi*crossSection/afterNothing);
      leftoverLeptonPT->Draw();
      leftoverLeptonEta->Scale(Lumi*crossSection/afterNothing);
      leftoverLeptonEta->Draw();
      leftoverLeptonphi->Scale(Lumi*crossSection/afterNothing);
      leftoverLeptonphi->Draw();
      leftoverLeptonmass->Scale(Lumi*crossSection/afterNothing);
      leftoverLeptonmass->Draw();

      zLeptonPT->Scale(Lumi*crossSection/afterNothing);
      zLeptonPT->Draw();
      zLeptonEta->Scale(Lumi*crossSection/afterNothing);
      zLeptonEta->Draw();
      zLeptonphi->Scale(Lumi*crossSection/afterNothing);
      zLeptonphi->Draw();
      zLeptonmass->Scale(Lumi*crossSection/afterNothing);
      zLeptonmass->Draw();

      zAntiLeptonPT->Scale(Lumi*crossSection/afterNothing);
      zAntiLeptonPT->Draw();
      zAntiLeptonEta->Scale(Lumi*crossSection/afterNothing);
      zAntiLeptonEta->Draw();
      zAntiLeptonphi->Scale(Lumi*crossSection/afterNothing);
      zAntiLeptonphi->Draw();
      zAntiLeptonmass->Scale(Lumi*crossSection/afterNothing);
      zAntiLeptonmass->Draw();

      WTmass->Scale(Lumi*crossSection/afterNothing);
      WTmass->Draw();


      TopPolHB->Scale(Lumi*crossSection/afterNothing);
      TopPolOB->Scale(Lumi*crossSection/afterNothing);
      centralityhist->Scale(Lumi*crossSection/afterNothing);
      sphericityhist->Scale(Lumi*crossSection/afterNothing);
      aplanarityhist->Scale(Lumi*crossSection/afterNothing);
      WHel->Scale(Lumi*crossSection/afterNothing);
      h_hist->Scale(Lumi*crossSection/afterNothing);
      ht_hist->Scale(Lumi*crossSection/afterNothing);

      TopPolHB->Draw();
      TopPolOB->Draw();
      centralityhist->Draw();
      sphericityhist->Draw();
      aplanarityhist->Draw();
      WHel->Draw();
      h_hist->Draw();
      ht_hist->Draw();

      
      c1->cd();
      c1->SetBorderMode(0);

      //c1->SetName("tz leptons");
      //gROOT->SetStyle("Plain");
      gStyle->SetOptTitle(0);
      //gStyle->SetOptTitle(0);
      gStyle->SetOptStat(0);
      //gStyle->SetOptStat(0);
      //gStyle->SetStatBorderSize(0);
      //gStyle->SetStatColor(0);

      //gStyle->UseCurrentStyle();
           
      //gROOT->ForceStyle();

      leftoverLeptonPT->SetTitle(" ");
      
      leftoverLeptonPT->UseCurrentStyle();
      leftoverLeptonPT->SetFillColor(0);
      leftoverLeptonPT->SetLineColor(2);
      leftoverLeptonPT->Draw();

      zAntiLeptonPT->UseCurrentStyle();
      zAntiLeptonPT->SetFillColor(0);
      zAntiLeptonPT->SetLineColor(3);
      zAntiLeptonPT->Draw("SAME");

      zLeptonPT->UseCurrentStyle();
      zLeptonPT->SetFillColor(0);
      zLeptonPT->SetLineColor(4);
      zLeptonPT->Draw("SAME");

      TLegend *leg = new TLegend(0.53,0.79,0.94,0.97);
      leg->SetFillColor(0);
      leg->SetLineColor(0);

      leg->SetShadowColor(0);
      
      leg->AddEntry(leftoverLeptonPT ,"wLeptonPT","l" ); 
      leg->AddEntry(zAntiLeptonPT ,"zAntiLeptonPT","l" ); 
      leg->AddEntry(zLeptonPT ,"zLeptonPT","l" ); 

      
      leg->SetTextFont(132);
      leg->SetTextSize(0.05);
      leg->Draw();
      
      TAxis *xaxis = leftoverLeptonPT->GetXaxis();
      xaxis->SetTitle("Lepton Pt (GeV)");






      //myText(0.55, 0.83, 1, Form("#int L dt = %.1f fb^{-1}",(float)lum));
      
       

      //c1->Print("Blah.pdf");

         
    }
  
  TFile outfile(out,"recreate");

  c1->Write();

  zLeptonPT->SetLineColor(4);

  zAntiLeptonPT->SetLineColor(3);
  
  leftoverLeptonPT->SetLineColor(2);

  leftoverLeptonPT->SetTitle("Leftover Lepton PT");

  tPT->Write();
  tEta->Write();
  tphi->Write();
  
  bPT->Write();
  bEta->Write();
  bphi->Write();
  
  lPT->Write();
  lEta->Write();
  lphi->Write();
  
  vPT->Write();
  vEta->Write();
  vphi->Write();
  
  wPT->Write();
  wEta->Write();
  wphi->Write();
  
  zPT->Write();
  zEta->Write();
  zphi->Write();
  
  testNjets->Write();
  testNlep->Write();
  testNelec->Write();

  BJetPT->Write();
  BJetEta->Write();
  BJetphi->Write();
  BJetmass->Write();
  
  nonBJetPT->Write();
  nonBJetEta->Write();
  nonBJetphi->Write();
  nonBJetmass->Write();
  
  MET_PT->Write();
  MET_Eta->Write();
  MET_phi->Write();
  MET_pz->Write();
  
  lepton1PT->Write();
  lepton1Eta->Write();
  lepton1phi->Write();
  lepton1mass->Write();
  
  lepton2PT->Write();
  lepton2Eta->Write();
  lepton2phi->Write();
  lepton2mass->Write();

  lepton3PT->Write();
  lepton3Eta->Write();
  lepton3phi->Write();
  lepton3mass->Write();

  leftoverLeptonPT->Write();
  leftoverLeptonEta->Write();
  leftoverLeptonphi->Write();
  leftoverLeptonmass->Write();

  zLeptonPT->Write();
  zLeptonEta->Write();
  zLeptonphi->Write();
  zLeptonmass->Write();

  zAntiLeptonPT->Write();
  zAntiLeptonEta->Write();
  zAntiLeptonphi->Write();
  zAntiLeptonmass->Write();

  recoWPT->Write();
  recoWEta->Write();
  recoWphi->Write();
  recoWmass->Write();
  
  recoZPT->Write();
  recoZEta->Write();
  recoZphi->Write();
  recoZmass->Write();
  
  recotopPT->Write();
  recotopEta->Write();
  recotopphi->Write();
  recotopmass->Write();

  WTmass->Write();
  TopPolHB->Write();
  TopPolOB->Write();
  centralityhist->Write();
  sphericityhist->Write();
  aplanarityhist->Write();
  WHel->Write();
  h_hist->Write();
  ht_hist->Write();
  
  outfile.Write();
    
  cout<<'\n'<<'\n'<<'\n';
}



